{
  
    
        "post0": {
            "title": "Titanic 5",
            "content": "import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns plt.style.use(&#39;seaborn&#39;) sns.set(font_scale=2.5) import missingno as msno import warnings warnings.filterwarnings(&#39;ignore&#39;) %matplotlib inline df_train=pd.read_csv(&#39;C:/Users/ehfus/Downloads/titanic/train.csv&#39;) df_test=pd.read_csv(&#39;C:/Users/ehfus/Downloads/titanic/test.csv&#39;) . future engineering . df_train[&#39;Age&#39;].isnull().sum() . 177 . df_train[&#39;Initial&#39;]=df_train[&#39;Name&#39;].str.extract(&#39;([A-Za-z]+) .&#39;) df_test[&#39;Initial&#39;]=df_test[&#39;Name&#39;].str.extract(&#39;([A-Za-z]+) .&#39;) . pd.crosstab(df_train[&#39;Initial&#39;],df_train[&#39;Sex&#39;]).T.style.background_gradient(cmap=&#39;summer_r&#39;) . Initial Capt Col Countess Don Dr Jonkheer Lady Major Master Miss Mlle Mme Mr Mrs Ms Rev Sir . Sex &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; . female 0 | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 0 | 182 | 2 | 1 | 0 | 125 | 1 | 0 | 0 | . male 1 | 2 | 0 | 1 | 6 | 1 | 0 | 2 | 40 | 0 | 0 | 0 | 517 | 0 | 0 | 6 | 1 | . df_train[&#39;Initial&#39;].replace([&#39;Mile&#39;,&#39;Mme&#39;,&#39;Ms&#39;,&#39;Dr&#39;,&#39;Major&#39;,&#39;Lady&#39;,&#39;Countess&#39;,&#39;Jonkheer&#39;,&#39;Col&#39;,&#39;Rev&#39;,&#39;Capt&#39;,&#39;Sir&#39;,&#39;Don&#39;,&#39;Dona&#39;], [&#39;Miss&#39;,&#39;Miss&#39;,&#39;Miss&#39;,&#39;Mr&#39;,&#39;Mr&#39;,&#39;Mrs&#39;,&#39;Mrs&#39;,&#39;Other&#39;,&#39;Other&#39;,&#39;Other&#39;,&#39;Mr&#39;,&#39;Mr&#39;,&#39;Mr&#39;,&#39;Mr&#39;],inplace=True) # ,inplace=&#39;True&#39; =&gt; 바로 적용하는 것 df_test[&#39;Initial&#39;].replace([&#39;Mile&#39;,&#39;Mme&#39;,&#39;Ms&#39;,&#39;Dr&#39;,&#39;Major&#39;,&#39;Lady&#39;,&#39;Countess&#39;,&#39;Jonkheer&#39;,&#39;Col&#39;,&#39;Rev&#39;,&#39;Capt&#39;,&#39;Sir&#39;,&#39;Don&#39;,&#39;Dona&#39;], [&#39;Miss&#39;,&#39;Miss&#39;,&#39;Miss&#39;,&#39;Mr&#39;,&#39;Mr&#39;,&#39;Mrs&#39;,&#39;Mrs&#39;,&#39;Other&#39;,&#39;Other&#39;,&#39;Other&#39;,&#39;Mr&#39;,&#39;Mr&#39;,&#39;Mr&#39;,&#39;Mr&#39;],inplace=True) # ,inplace=&#39;True&#39; =&gt; 바로 적용하는 것 . df_train.groupby(&#39;Initial&#39;).mean() . PassengerId Survived Pclass Age SibSp Parch Fare . Initial . Master 414.975000 | 0.575000 | 2.625000 | 4.574167 | 2.300000 | 1.375000 | 34.703125 | . Miss 408.864130 | 0.701087 | 2.298913 | 21.831081 | 0.706522 | 0.543478 | 43.769091 | . Mlle 676.500000 | 1.000000 | 1.000000 | 24.000000 | 0.000000 | 0.000000 | 59.402100 | . Mr 455.880907 | 0.162571 | 2.381853 | 32.739609 | 0.293006 | 0.151229 | 24.939822 | . Mrs 456.393701 | 0.795276 | 1.984252 | 35.981818 | 0.692913 | 0.818898 | 45.420603 | . Other 564.444444 | 0.111111 | 1.666667 | 45.888889 | 0.111111 | 0.111111 | 19.102778 | . df_train.groupby(&#39;Initial&#39;)[&#39;Survived&#39;].mean().plot.bar() . &lt;AxesSubplot:xlabel=&#39;Initial&#39;&gt; . df_all=pd.concat([df_train,df_test]) df_all.groupby(&#39;Initial&#39;).mean() . PassengerId Survived Pclass Age SibSp Parch Fare . Initial . Master 658.852459 | 0.575000 | 2.655738 | 5.482642 | 2.049180 | 1.377049 | 36.008195 | . Miss 616.539924 | 0.701087 | 2.342205 | 21.814104 | 0.657795 | 0.498099 | 42.540369 | . Mlle 676.500000 | 1.000000 | 1.000000 | 24.000000 | 0.000000 | 0.000000 | 59.402100 | . Mr 658.831388 | 0.162571 | 2.359274 | 32.556397 | 0.286641 | 0.159533 | 25.316303 | . Mrs 685.673367 | 0.795276 | 1.929648 | 37.034884 | 0.658291 | 0.824121 | 50.686244 | . Other 714.923077 | 0.111111 | 1.615385 | 44.923077 | 0.230769 | 0.153846 | 35.919231 | . df_train.loc[(df_train[&#39;Age&#39;].isnull())&amp;(df_train[&#39;Initial&#39;]==&#39;Mr&#39;),&#39;Age&#39;] . 5 NaN 17 NaN 26 NaN 29 NaN 36 NaN .. 839 NaN 846 NaN 859 NaN 868 NaN 878 NaN Name: Age, Length: 120, dtype: float64 . 이제 NaN값을 평균값으로 다 변경해보자 | . df_train.loc[(df_train[&#39;Age&#39;].isnull())&amp;(df_train[&#39;Initial&#39;]==&#39;Mr&#39;),&#39;Age&#39;]=33 df_train.loc[(df_train[&#39;Age&#39;].isnull())&amp;(df_train[&#39;Initial&#39;]==&#39;Mrs&#39;),&#39;Age&#39;]=37 df_train.loc[(df_train[&#39;Age&#39;].isnull())&amp;(df_train[&#39;Initial&#39;]==&#39;Master&#39;),&#39;Age&#39;]=5 df_train.loc[(df_train[&#39;Age&#39;].isnull())&amp;(df_train[&#39;Initial&#39;]==&#39;Miss&#39;),&#39;Age&#39;]=22 df_train.loc[(df_train[&#39;Age&#39;].isnull())&amp;(df_train[&#39;Initial&#39;]==&#39;Other&#39;),&#39;Age&#39;]=45 df_test.loc[(df_test[&#39;Age&#39;].isnull())&amp;(df_test[&#39;Initial&#39;]==&#39;Mr&#39;),&#39;Age&#39;]=33 df_test.loc[(df_test[&#39;Age&#39;].isnull())&amp;(df_test[&#39;Initial&#39;]==&#39;Mrs&#39;),&#39;Age&#39;]=37 df_test.loc[(df_test[&#39;Age&#39;].isnull())&amp;(df_test[&#39;Initial&#39;]==&#39;Master&#39;),&#39;Age&#39;]=5 df_test.loc[(df_test[&#39;Age&#39;].isnull())&amp;(df_test[&#39;Initial&#39;]==&#39;Miss&#39;),&#39;Age&#39;]=22 df_test.loc[(df_test[&#39;Age&#39;].isnull())&amp;(df_test[&#39;Initial&#39;]==&#39;Other&#39;),&#39;Age&#39;]=45 . df_test[&#39;Age&#39;].isnull().sum() . 0 . df_train[&#39;Age&#39;].isnull().sum() . 0 . NaN값이 다 채워졌음을 알 수 있음 . Embarked feature . NaN값이 두개 였는데 다 S항구로 변형해주겠음 . df_train[&#39;Embarked&#39;].fillna(&#39;S&#39;,inplace=True) . df_train[&#39;Age_cat&#39;]=0 . df_train.loc[df_train[&#39;Age&#39;] &lt; 10,&#39;Age_cat&#39;]=0 df_train.loc[(10&lt;=df_train[&#39;Age&#39;]) &amp; (df_train[&#39;Age&#39;]&lt;20),&#39;Age_cat&#39;]=1 df_train.loc[(20&lt;=df_train[&#39;Age&#39;]) &amp; (df_train[&#39;Age&#39;]&lt;30),&#39;Age_cat&#39;]=2 df_train.loc[(30&lt;=df_train[&#39;Age&#39;]) &amp; (df_train[&#39;Age&#39;]&lt;40),&#39;Age_cat&#39;]=3 df_train.loc[(40&lt;=df_train[&#39;Age&#39;]) &amp; (df_train[&#39;Age&#39;]&lt;50),&#39;Age_cat&#39;]=4 df_train.loc[(50&lt;=df_train[&#39;Age&#39;]) &amp; (df_train[&#39;Age&#39;]&lt;60),&#39;Age_cat&#39;]=5 df_train.loc[(60&lt;=df_train[&#39;Age&#39;]) &amp; (df_train[&#39;Age&#39;]&lt;70),&#39;Age_cat&#39;]=6 df_train.loc[(70&lt;=df_train[&#39;Age&#39;]),&#39;Age_cat&#39;]=7 . df_test.loc[df_test[&#39;Age&#39;] &lt; 10,&#39;Age_cat&#39;]=0 df_test.loc[(10&lt;=df_test[&#39;Age&#39;]) &amp; (df_test[&#39;Age&#39;]&lt;20),&#39;Age_cat&#39;]=1 df_test.loc[(20&lt;=df_test[&#39;Age&#39;]) &amp; (df_test[&#39;Age&#39;]&lt;30),&#39;Age_cat&#39;]=2 df_test.loc[(30&lt;=df_test[&#39;Age&#39;]) &amp; (df_test[&#39;Age&#39;]&lt;40),&#39;Age_cat&#39;]=3 df_test.loc[(40&lt;=df_test[&#39;Age&#39;]) &amp; (df_test[&#39;Age&#39;]&lt;50),&#39;Age_cat&#39;]=4 df_test.loc[(50&lt;=df_test[&#39;Age&#39;]) &amp; (df_test[&#39;Age&#39;]&lt;60),&#39;Age_cat&#39;]=5 df_test.loc[(60&lt;=df_test[&#39;Age&#39;]) &amp; (df_test[&#39;Age&#39;]&lt;70),&#39;Age_cat&#39;]=6 df_test.loc[(70&lt;=df_test[&#39;Age&#39;]),&#39;Age_cat&#39;]=7 . 이건 너무 hard coding . apply와 function을 이용해보자 . def f(x): if x&lt;10 : return 0 elif x&lt;20 : return 1 elif x&lt;30 : return 2 elif x&lt;40 : return 3 elif x&lt;50 : return 4 elif x&lt;60 : return 5 elif x&lt;70 : return 6 else : return 7 . df_train[&#39;Age_cat2&#39;]=df_train[&#39;Age&#39;].apply(f) . (df_train[&#39;Age_cat&#39;]==df_train[&#39;Age_cat2&#39;]).all() . True . all.() 모두 True일 때 True . any.() 하나라도 True면 True . df_train.drop([&#39;Age&#39;,&#39;Age_cat2&#39;],axis=1,inplace=True) df_test.drop([&#39;Age&#39;],axis=1,inplace=True) . 필요없는 열들의 모든 값들을 DROP . . Initial엔 어떤 게 있을까 | . df_train.Initial.unique() . array([&#39;Mr&#39;, &#39;Mrs&#39;, &#39;Miss&#39;, &#39;Master&#39;, &#39;Other&#39;, &#39;Mlle&#39;], dtype=object) . df_train[&#39;Initial&#39;]=df_train[&#39;Initial&#39;].map({&#39;Master&#39;:0,&#39;Miss&#39;:1,&#39;Mr&#39;:2,&#39;Mrs&#39;:3,&#39;Other&#39;:4}) df_test[&#39;Initial&#39;]=df_test[&#39;Initial&#39;].map({&#39;Master&#39;:0,&#39;Miss&#39;:1,&#39;Mr&#39;:2,&#39;Mrs&#39;:3,&#39;Other&#39;:4}) . df_train.Embarked.unique() . array([&#39;S&#39;, &#39;C&#39;, &#39;Q&#39;], dtype=object) . df_train[&#39;Embarked&#39;].value_counts() . S 646 C 168 Q 77 Name: Embarked, dtype: int64 . df_train.Embarked.value_counts() . S 646 C 168 Q 77 Name: Embarked, dtype: int64 . df_train[&#39;Embarked&#39;]=df_train[&#39;Embarked&#39;].map({&#39;C&#39;:0,&#39;Q&#39;:1,&#39;S&#39;:1}) df_test[&#39;Embarked&#39;]=df_test[&#39;Embarked&#39;].map({&#39;C&#39;:0,&#39;Q&#39;:1,&#39;S&#39;:1}) . df_train.Embarked.isnull().any() . False . df_train.Embarked.isnull().sum() . 0 . null data가 없음을 알 수 있음 . df_train[&#39;Sex&#39;].unique() . array([&#39;male&#39;, &#39;female&#39;], dtype=object) . df_train[&#39;Sex&#39;]=df_train[&#39;Sex&#39;].map({&#39;female&#39;:0,&#39;male&#39;:1}) df_test[&#39;Sex&#39;]=df_test[&#39;Sex&#39;].map({&#39;female&#39;:0,&#39;male&#39;:1}) . 각 feature들을 다 수치로 변경해줬음 $ to$ 각 feature들 간의 선형적 상관관계, 비례, 반비례를 알아볼 수 있음 | . df_train[&#39;FamilySize&#39;]=df_train[&#39;SibSp&#39;] + df_train[&#39;Parch&#39;] + 1 . df_train[&#39;Fare&#39;]=df_train[&#39;Fare&#39;].map(lambda i: np.log(i) if i&gt;0 else 0) . heatmap_data=df_train[[&#39;Survived&#39;,&#39;Pclass&#39;,&#39;Sex&#39;,&#39;Fare&#39;,&#39;Embarked&#39;,&#39;FamilySize&#39;,&#39;Initial&#39;,&#39;Age_cat&#39;]] . colormap=plt.cm.BuGn plt.figure(figsize=(12,10)) plt.title(&#39;Pearson Corre;atiom of Features&#39;,y=1.05,size=15) sns.heatmap(heatmap_data.astype(float).corr(),linewidths=0.04,vmax=.5, square=True,cmap=colormap,linecolor=&#39;white&#39;,annot=True,annot_kws={&#39;size&#39;: 16},fmt=&#39;.1f&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Pearson Corre;atiom of Features&#39;}&gt; .",
            "url": "https://rhkrehtjd.github.io/kaggle/2021/12/27/titanlic.html",
            "relUrl": "/2021/12/27/titanlic.html",
            "date": " • Dec 27, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Titanic 4",
            "content": "Pclass, Sex, Age . import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns plt.style.use(&#39;seaborn&#39;) sns.set(font_scale=2.5) import missingno as msno import warnings warnings.filterwarnings(&#39;ignore&#39;) %matplotlib inline df_train=pd.read_csv(&#39;C:/Users/ehfus/Downloads/titanic/train.csv&#39;) df_test=pd.read_csv(&#39;C:/Users/ehfus/Downloads/titanic/test.csv&#39;) . fig,ax=plt.subplots(1,2,figsize=(18,8)) sns.violinplot(&#39;Pclass&#39;,&#39;Age&#39;,hue=&#39;Survived&#39;,data=df_train,sacle=&#39;count&#39;,split=True,ax=ax[0]) ax[0].set_title(&#39;Pclass and Age vs Survived&#39;) ax[0].set_yticks(range(0,110,10)) sns.violinplot(&#39;Sex&#39;,&#39;Age&#39;,hue=&#39;Survived&#39;,data=df_train,scale=&#39;count&#39;,split=True, ax=ax[1]) ax[1].set_title(&#39;Sexx and Age vs Survived&#39;) ax[1].set_yticks(range(0,110,10)) plt.show() . scale에도 option이 여러가지 있음, google에서 확인해볼 것 | . Embarked :&#53457;&#49849;&#54620; &#54637;&#44396; . f,ax=plt.subplots(1,1,figsize=(7,7)) df_train[[&#39;Embarked&#39;,&#39;Survived&#39;]] .groupby([&#39;Embarked&#39;], as_index=True).mean() .sort_values(by=&#39;Survived&#39;, ascending=False) .plot.bar(ax=ax) . &lt;AxesSubplot:xlabel=&#39;Embarked&#39;&gt; . sort_values 또는 sort_index도 사용 가능 | . f,ax=plt.subplots(2,2,figsize=(20,15)) #2차원임/ 1,2는 1차원 sns.countplot(&#39;Embarked&#39;,data=df_train, ax=ax[0,0]) ax[0,0].set_title(&#39;(1) No. Of Passengers Boared&#39;) sns.countplot(&#39;Embarked&#39;,hue=&#39;Sex&#39;,data=df_train, ax=ax[0,1]) ax[0,1].set_title(&#39;(2) Male-Female split for embarked&#39;) sns.countplot(&#39;Embarked&#39;, hue=&#39;Survived&#39;, data=df_train, ax=ax[1,0]) ax[1,0].set_title(&#39;(3) Embarked vs Survived&#39;) sns.countplot(&#39;Embarked&#39;, hue=&#39;Pclass&#39;, data=df_train, ax=ax[1,1]) ax[1,1].set_title(&#39;(4) Embarked vs Survived&#39;) plt.subplots_adjust(wspace=0.2, hspace=0.5) # 상하좌우간격 맞춰줌 plt.show() . Family - SibSp + ParCh . df_train[&#39;FamilySize&#39;]=df_train[&#39;SibSp&#39;] + df_train[&#39;Parch&#39;] + 1 . print(&#39;Maximum size of Family : &#39;,df_train[&#39;FamilySize&#39;].max()) print(&#39;Minimum size of Family : &#39;,df_train[&#39;FamilySize&#39;].min()) . Maximum size of Family : 11 Minimum size of Family : 1 . Pandas series는 연산이 가능 | . f,ax=plt.subplots(1,3,figsize=(40,10)) sns.countplot(&#39;FamilySize&#39;, data=df_train, ax=ax[0]) ax[0].set_title(&#39;(1) No. Of Passenger Boarded&#39;, y=1.02) sns.countplot(&#39;FamilySize&#39;, hue=&#39;Survived&#39;,data=df_train, ax=ax[1]) ax[1].set_title(&#39;(2) Survived countplot depending on FamilySize&#39;, y=1.02) df_train[[&#39;FamilySize&#39;,&#39;Survived&#39;]].groupby([&#39;FamilySize&#39;],as_index=True).mean().sort_values(by=&#39;Survived&#39;,ascending=False).plot.bar(ax=ax[2]) ax[2].set_title(&#39;(3) Survived rate depending on FamilySize&#39;,y=1.02) plt.subplots_adjust(wspace=0.2,hspace=0.5) plt.show() . Fare :&#50836;&#44552;, &#50672;&#49549;&#54805; &#48320;&#49688; . distplot ?? 시리즈에 히스토그램을 그려줌,Skewness? 왜도임 + 첨도도 있음 . | 왜도? 첨도? . | python에서 나타내는 함수는? . | . fig,ax=plt.subplots(1,1,figsize=(8,8)) g=sns.distplot(df_train[&#39;Fare&#39;], color=&#39;b&#39;,label=&#39;Skewness{:.2f}&#39;.format(df_train[&#39;Fare&#39;].skew()),ax=ax) g=g.legend(loc=&#39;best&#39;) . skewness가 5정도로 꽤 큼 -&gt; 좌로 많이 치우쳐져 있음 -&gt; 그대로 모델에 학습시키면 성능이 낮아질 수 있음 | . df_train[&#39;Fare&#39;]=df_train[&#39;Fare&#39;].map(lambda i: np.log(i) if i&gt;0 else 0) . df_train[&#39;Fare&#39;]의 값을 적절하게 변형 중 . fig,ax=plt.subplots(1,1,figsize=(8,8)) g=sns.distplot(df_train[&#39;Fare&#39;], color=&#39;b&#39;,label=&#39;Skewness{:.2f}&#39;.format(df_train[&#39;Fare&#39;].skew()),ax=ax) g=g.legend(loc=&#39;best&#39;) . 이런 작업(log로 변환)을 통해 skewness가 0으로 근접하게 해주었음 . df_train[&#39;Ticket&#39;].value_counts() . 347082 7 CA. 2343 7 1601 7 3101295 6 CA 2144 6 .. 9234 1 19988 1 2693 1 PC 17612 1 370376 1 Name: Ticket, Length: 681, dtype: int64 . 정말 다양한 자료형태가 결합되어 있음 -&gt; 적절한 변형이 필요해 보임 .",
            "url": "https://rhkrehtjd.github.io/kaggle/2021/12/26/titanic.html",
            "relUrl": "/2021/12/26/titanic.html",
            "date": " • Dec 26, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Titanic 3",
            "content": "import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns plt.style.use(&#39;seaborn&#39;) sns.set(font_scale=2.5) import missingno as msno import warnings warnings.filterwarnings(&#39;ignore&#39;) %matplotlib inline df_train=pd.read_csv(&#39;C:/Users/ehfus/Downloads/titanic/train.csv&#39;) df_test=pd.read_csv(&#39;C:/Users/ehfus/Downloads/titanic/test.csv&#39;) . print(&#39;제일 나이 많은 탑승객 : {:.1f} years&#39;.format(df_train[&#39;Age&#39;].max())) print(&#39;제일 어린 탑승객 : {:.1f} tears&#39;.format(df_train[&#39;Age&#39;].max())) print(&#39;탑승객 평균 나이 : {:.1f} years&#39;.format(df_train[&#39;Age&#39;].mean())) . 제일 나이 많은 탑승객 : 80.0 years 제일 어린 탑승객 : 80.0 tears 탑승객 평균 나이 : 29.7 years . fig,ax=plt.subplots(1,1,figsize=(9,5)) sns.kdeplot(df_train[df_train[&#39;Survived&#39;]==1][&#39;Age&#39;], ax=ax) sns.kdeplot(df_train[df_train[&#39;Survived&#39;]==0][&#39;Age&#39;], ax=ax) plt.legend([&#39;Survived == 1&#39;,&#39;Survived == 0&#39;]) plt.show() . df_train[df_train[&#39;Survived&#39;]==1][&#39;Age&#39;].hist() . &lt;AxesSubplot:&gt; . 나이가 어릴 수록 생존 확률 높아짐 | . ??kde?? . . &#46020;&#54868;&#51648; &#49373;&#49457;&#54616;&#45716; &#49464;&#44032;&#51648; &#48169;&#48277; . f = plt.figure(figsize=(3,3)) a=np.arange(100) b=np.sin(a) plt.plot(b) . [&lt;matplotlib.lines.Line2D at 0x1b5afa269a0&gt;] . f,ax = plt.subplots(1,1,figsize=(3,3)) a=np.arange(100) b=np.sin(a) ax.plot(b) . [&lt;matplotlib.lines.Line2D at 0x1b5afa77fa0&gt;] . plt.figure(figsize=(3,3)) a=np.arange(100) b=np.sin(a) plt.plot(b) . [&lt;matplotlib.lines.Line2D at 0x1b5afac8af0&gt;] . . plt.figure(figsize=(7,7)) df_train[&#39;Age&#39;][df_train[&#39;Pclass&#39;] == 1].plot(kind=&#39;hist&#39;) df_train[&#39;Age&#39;][df_train[&#39;Pclass&#39;] == 2].plot(kind=&#39;hist&#39;) df_train[&#39;Age&#39;][df_train[&#39;Pclass&#39;] == 3].plot(kind=&#39;hist&#39;) . &lt;AxesSubplot:ylabel=&#39;Frequency&#39;&gt; . 이렇게 hist로 하면 잘 안 보여서 아래처럼 kde로 해야함 | . plt.figure(figsize=(7,7)) df_train[&#39;Age&#39;][df_train[&#39;Pclass&#39;] == 1].plot(kind=&#39;kde&#39;) df_train[&#39;Age&#39;][df_train[&#39;Pclass&#39;] == 2].plot(kind=&#39;kde&#39;) df_train[&#39;Age&#39;][df_train[&#39;Pclass&#39;] == 3].plot(kind=&#39;kde&#39;) plt.xlabel(&#39;Age&#39;) plt.title(&#39;Age Distribution within classes&#39;) plt.legend([&#39;1st Class&#39;,&#39;2nd Class&#39;,&#39;3rd Class&#39;]) . &lt;matplotlib.legend.Legend at 0x1b5b0b82cd0&gt; . fig, ax = plt.subplots(1,1,figsize=(4,4)) a=np.arange(100) b=np.sin(a) ax.plot(b) ax.set_xlabel(&#39;sdf&#39;) # plt에선 set이 안 붙음 . Text(0.5, 0, &#39;sdf&#39;) . class &amp; 나이 별로 분포하는 생존자 . fig,ax=plt.subplots(1,1,figsize=(9,5)) sns.kdeplot(df_train[(df_train[&#39;Survived&#39;]==1) &amp;(df_train[&#39;Pclass&#39;] == 1)][&#39;Age&#39;], ax=ax) sns.kdeplot(df_train[(df_train[&#39;Survived&#39;]==1) &amp;(df_train[&#39;Pclass&#39;] == 2)][&#39;Age&#39;], ax=ax) sns.kdeplot(df_train[(df_train[&#39;Survived&#39;]==1) &amp;(df_train[&#39;Pclass&#39;] == 3)][&#39;Age&#39;], ax=ax) plt.legend([&#39;Pclass == 1&#39;,&#39;Pclass == 2&#39;,&#39;Pclass == 3&#39;]) plt.show() . fig,ax=plt.subplots(1,1,figsize=(9,5)) sns.kdeplot(df_train[(df_train[&#39;Survived&#39;]==0) &amp;(df_train[&#39;Pclass&#39;] == 1)][&#39;Age&#39;], ax=ax) sns.kdeplot(df_train[(df_train[&#39;Survived&#39;]==1) &amp;(df_train[&#39;Pclass&#39;] == 1)][&#39;Age&#39;], ax=ax) plt.legend([&#39;Survived == 0&#39;,&#39;Survived == 1&#39;]) plt.show() . 그런데 Age에 왜 마이너스까지 분포할까? | . 추정식이여서 fitting 했기 때문에 | . plt.figure(figsize=(7,7)) df_train[&#39;Age&#39;][(df_train[&#39;Pclass&#39;] == 1) &amp; (df_train[&#39;Survived&#39;]==0)].plot(kind=&#39;hist&#39;) # df_train[&#39;Age&#39;][(df_train[&#39;Pclass&#39;] == 1) &amp; (df_train[&#39;Survived&#39;]==1)].plot(kind=&#39;hist&#39;) plt.xlabel(&#39;Age&#39;) #plt.legend([&#39;Survived==0&#39;,&#39;Survived==1&#39;]) . Text(0.5, 0, &#39;Age&#39;) . 0까지 smooth하게 kde를 그리다보니까 마이너스까지 간 것 . fig,ax=plt.subplots(1,1,figsize=(9,5)) sns.kdeplot(df_train[(df_train[&#39;Survived&#39;]==0) &amp;(df_train[&#39;Pclass&#39;] == 2)][&#39;Age&#39;], ax=ax) sns.kdeplot(df_train[(df_train[&#39;Survived&#39;]==1) &amp;(df_train[&#39;Pclass&#39;] == 2)][&#39;Age&#39;], ax=ax) plt.legend([&#39;Survived == 0&#39;,&#39;Survived == 1&#39;]) plt.show() . 연령대가 낮아질 수록 생존확률이 높아짐을 알 수 있다 | . . change_age_range_survival_ratio = []= [] for i in range (1,80): change_age_range_survival_ratio.append(df_train[df_train[&#39;Age&#39;] &lt; i][&#39;Survived&#39;].sum()/len(df_train[df_train[&#39;Age&#39;]&lt;i][&#39;Survived&#39;])) plt.figure(figsize=(7,7)) plt.plot(change_age_range_survival_ratio) plt.title(&#39;Survival rate change dipending on range of Age&#39;, y=1.02) plt.ylabel(&#39;Survival rate&#39;) plt.xlabel(&#39;***Range of Age 0~x***&#39;) plt.show() . 즉 나이가 어릴 수록 생존 확률이 높다 | .",
            "url": "https://rhkrehtjd.github.io/kaggle/2021/12/25/titanic.html",
            "relUrl": "/2021/12/25/titanic.html",
            "date": " • Dec 25, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Titanic 2",
            "content": "import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns plt.style.use(&#39;seaborn&#39;) sns.set(font_scale=2.5) import missingno as msno import warnings warnings.filterwarnings(&#39;ignore&#39;) %matplotlib inline df_train=pd.read_csv(&#39;C:/Users/ehfus/Downloads/titanic/train.csv&#39;) df_test=pd.read_csv(&#39;C:/Users/ehfus/Downloads/titanic/test.csv&#39;) . Pclass . df_train[[&#39;Pclass&#39;,&#39;Survived&#39;]].groupby([&#39;Pclass&#39;],as_index=True).count() . Survived . Pclass . 1 216 | . 2 184 | . 3 491 | . count $VS$ sum . sum은 숫자 자체 데이터를 더한 것 | count는 각각 객체가 몇개 인가? | . pd.crosstab(df_train[&#39;Pclass&#39;],df_train[&#39;Survived&#39;],margins=True) .style.background_gradient(cmap=&#39;Greens&#39;) . Survived 0 1 All . Pclass &nbsp; &nbsp; &nbsp; . 1 80 | 136 | 216 | . 2 97 | 87 | 184 | . 3 372 | 119 | 491 | . All 549 | 342 | 891 | . margins =&gt; 각각 합계 . index여부에 따라 plot의 형태가 달라질 수 있음 . df_train[[&#39;Pclass&#39;,&#39;Survived&#39;]].groupby([&#39;Pclass&#39;], as_index=True) .mean().sort_values(by=&#39;Survived&#39;,ascending=False).plot.bar() . &lt;AxesSubplot:xlabel=&#39;Pclass&#39;&gt; . y_positions =1 #title의 위치 f,ax = plt.subplots(1,2,figsize=(18,8)) df_train[&#39;Pclass&#39;].value_counts().plot.bar(color=[&#39;#CD7F32&#39;,&#39;#FFDF00&#39;,&#39;#D3D3D3&#39;],ax=ax[0]) ax[0].set_title(&#39;Number of passengers By Pclass&#39;, y=y_positions) ax[0].set_ylabel(&#39;Count&#39;) sns.countplot(&#39;Pclass&#39;,hue=&#39;Survived&#39;,data=df_train, ax=ax[1]) ax[1].set_title(&#39;Pclass: Survived vs Dead&#39;, y=y_positions) plt.show() . SEX . f,ax=plt.subplots(1,2,figsize=(18,8)) df_train[[&#39;Sex&#39;,&#39;Survived&#39;]].groupby([&#39;Sex&#39;],as_index=True).mean().plot.bar(ax=ax[0]) ax[0].set_title(&#39;Survived vs Sex&#39;) sns.countplot(&#39;Sex&#39;,hue=&#39;Survived&#39;,data=df_train,ax=ax[1]) ax[1].set_title(&#39;Sex: survived vs Dead&#39;) plt.show() . f,ax=plt.subplots(1,2,figsize=(18,8)) df_train[[&#39;Sex&#39;,&#39;Survived&#39;]].groupby([&#39;Sex&#39;],as_index=True).mean().plot.bar(ax=ax[0]) ax[0].set_title(&#39;Survived vs Sex&#39;) sns.countplot(&#39;Sex&#39;,hue=&#39;Survived&#39;,data=df_train,ax=ax[1]) ax[1].set_title(&#39;Sex: survived vs Dead&#39;) plt.show() . pd.crosstab(df_train[&#39;Sex&#39;],df_train[&#39;Survived&#39;],margins=True).style.background_gradient(cmap=&#39;summer_r&#39;) . Survived 0 1 All . Sex &nbsp; &nbsp; &nbsp; . female 81 | 233 | 314 | . male 468 | 109 | 577 | . All 549 | 342 | 891 | . sns.factorplot(&#39;Pclass&#39;,&#39;Survived&#39;,hue=&#39;Sex&#39;,data=df_train,size=5,aspect=1.5) . &lt;seaborn.axisgrid.FacetGrid at 0x2679dc1abe0&gt; . Lady first? | Money brings survival? | . sns.factorplot(&#39;Sex&#39;,&#39;Survived&#39;,col=&#39;Pclass&#39;,data=df_train,saturation=.5,size=9,aspect=1) . &lt;seaborn.axisgrid.FacetGrid at 0x2679256baf0&gt; . 여기서 col=&#39;Pclass&#39; 는 color가 아니라 columns를 의미함 . sns.factorplot(&#39;Sex&#39;,&#39;Survived&#39;,hue=&#39;Pclass&#39;,data=df_train,saturation=.5,size=6,aspect=1) . &lt;seaborn.axisgrid.FacetGrid at 0x2679dde22e0&gt; . hue = 색상 | saturation = 채도 | value = 명도 | . 여기서 saturation을 왜 썼지? .",
            "url": "https://rhkrehtjd.github.io/kaggle/2021/12/24/titanic.html",
            "relUrl": "/2021/12/24/titanic.html",
            "date": " • Dec 24, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Titanic 1",
            "content": "import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns plt.style.use(&#39;seaborn&#39;) sns.set(font_scale=2.5) import missingno as msno import warnings warnings.filterwarnings(&#39;ignore&#39;) %matplotlib inline df_train=pd.read_csv(&#39;C:/Users/ehfus/Downloads/titanic/train.csv&#39;) df_test=pd.read_csv(&#39;C:/Users/ehfus/Downloads/titanic/test.csv&#39;) . df_train.head() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . df_test.head() . PassengerId Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 892 | 3 | Kelly, Mr. James | male | 34.5 | 0 | 0 | 330911 | 7.8292 | NaN | Q | . 1 893 | 3 | Wilkes, Mrs. James (Ellen Needs) | female | 47.0 | 1 | 0 | 363272 | 7.0000 | NaN | S | . 2 894 | 2 | Myles, Mr. Thomas Francis | male | 62.0 | 0 | 0 | 240276 | 9.6875 | NaN | Q | . 3 895 | 3 | Wirz, Mr. Albert | male | 27.0 | 0 | 0 | 315154 | 8.6625 | NaN | S | . 4 896 | 3 | Hirvonen, Mrs. Alexander (Helga E Lindqvist) | female | 22.0 | 1 | 1 | 3101298 | 12.2875 | NaN | S | . 각 칼럼의 통계적인 수치들 . df_train.describe() . PassengerId Survived Pclass Age SibSp Parch Fare . count 891.000000 | 891.000000 | 891.000000 | 714.000000 | 891.000000 | 891.000000 | 891.000000 | . mean 446.000000 | 0.383838 | 2.308642 | 29.699118 | 0.523008 | 0.381594 | 32.204208 | . std 257.353842 | 0.486592 | 0.836071 | 14.526497 | 1.102743 | 0.806057 | 49.693429 | . min 1.000000 | 0.000000 | 1.000000 | 0.420000 | 0.000000 | 0.000000 | 0.000000 | . 25% 223.500000 | 0.000000 | 2.000000 | 20.125000 | 0.000000 | 0.000000 | 7.910400 | . 50% 446.000000 | 0.000000 | 3.000000 | 28.000000 | 0.000000 | 0.000000 | 14.454200 | . 75% 668.500000 | 1.000000 | 3.000000 | 38.000000 | 1.000000 | 0.000000 | 31.000000 | . max 891.000000 | 1.000000 | 3.000000 | 80.000000 | 8.000000 | 6.000000 | 512.329200 | . df_train.max() # df_train.describe() 에 들어있긴 함 . PassengerId 891 Survived 1 Pclass 3 Name van Melkebeke, Mr. Philemon Sex male Age 80.0 SibSp 8 Parch 6 Ticket WE/P 5735 Fare 512.3292 dtype: object . df_train.describe() . PassengerId Survived Pclass Age SibSp Parch Fare . count 891.000000 | 891.000000 | 891.000000 | 714.000000 | 891.000000 | 891.000000 | 891.000000 | . mean 446.000000 | 0.383838 | 2.308642 | 29.699118 | 0.523008 | 0.381594 | 32.204208 | . std 257.353842 | 0.486592 | 0.836071 | 14.526497 | 1.102743 | 0.806057 | 49.693429 | . min 1.000000 | 0.000000 | 1.000000 | 0.420000 | 0.000000 | 0.000000 | 0.000000 | . 25% 223.500000 | 0.000000 | 2.000000 | 20.125000 | 0.000000 | 0.000000 | 7.910400 | . 50% 446.000000 | 0.000000 | 3.000000 | 28.000000 | 0.000000 | 0.000000 | 14.454200 | . 75% 668.500000 | 1.000000 | 3.000000 | 38.000000 | 1.000000 | 0.000000 | 31.000000 | . max 891.000000 | 1.000000 | 3.000000 | 80.000000 | 8.000000 | 6.000000 | 512.329200 | . &#51088;&#47308; &#54805;&#53468; . df_train.shape . (891, 12) . df_train.columns . Index([&#39;PassengerId&#39;, &#39;Survived&#39;, &#39;Pclass&#39;, &#39;Name&#39;, &#39;Sex&#39;, &#39;Age&#39;, &#39;SibSp&#39;, &#39;Parch&#39;, &#39;Ticket&#39;, &#39;Fare&#39;, &#39;Cabin&#39;, &#39;Embarked&#39;], dtype=&#39;object&#39;) . &#44033; &#52860;&#47100;&#50640; null data&#44032; &#47751;&#44060; &#51080;&#45716;&#51648; &#54140;&#49468;&#53944;&#47484; &#48372;&#44592; &#50948;&#54620; . {0:&lt;10} =&gt; {0} 값을 &quot;:&lt;10&quot; 10자리로 표현할건데 왼쪽 정렬 | {1:&gt;5} =&gt; {1} 값을 &quot;:&gt;5&quot; 5자리로 표현할건데 오른쪽 정렬 | :^10 = 가운데 정렬 | t 이건 탭 한 번 눌러주는 기능 =&gt; 그래서 중간에 크게 띄어쓰기 가능해짐 | . for col in df_train.columns: msg=&#39;column: {:^11} t Percent of NaN value {:.2f}%&#39; .format(col, 100*(df_train[col].isnull().sum()/df_train[col].shape[0] )) print(msg) . column: PassengerId Percent of NaN value 0.00% column: Survived Percent of NaN value 0.00% column: Pclass Percent of NaN value 0.00% column: Name Percent of NaN value 0.00% column: Sex Percent of NaN value 0.00% column: Age Percent of NaN value 19.87% column: SibSp Percent of NaN value 0.00% column: Parch Percent of NaN value 0.00% column: Ticket Percent of NaN value 0.00% column: Fare Percent of NaN value 0.00% column: Cabin Percent of NaN value 77.10% column: Embarked Percent of NaN value 0.22% . for col in df_test.columns: msg=&#39;column:{:&gt;10} t Percent of NaN value {:.2f}%&#39; .format(col,100*(df_test[col].isnull().sum()/df_test[col].shape[0] )) print(msg) . column:PassengerId Percent of NaN value 0.00% column: Pclass Percent of NaN value 0.00% column: Name Percent of NaN value 0.00% column: Sex Percent of NaN value 0.00% column: Age Percent of NaN value 20.57% column: SibSp Percent of NaN value 0.00% column: Parch Percent of NaN value 0.00% column: Ticket Percent of NaN value 0.00% column: Fare Percent of NaN value 0.24% column: Cabin Percent of NaN value 78.23% column: Embarked Percent of NaN value 0.00% . 위 셀에서 for문 실행하면서 가장 마지막에 col에 Embarked가 저장되면서 col이 Embarked로 끝나게 됨 . col . &#39;Embarked&#39; . df_train[col] . 0 S 1 C 2 S 3 S 4 S .. 886 S 887 S 888 S 889 C 890 Q Name: Embarked, Length: 891, dtype: object . df_train[col].isnull() . 0 False 1 False 2 False 3 False 4 False ... 886 False 887 False 888 False 889 False 890 False Name: Embarked, Length: 891, dtype: bool . df_train[col].isnull().sum() . 2 . msno라는 라이브러리를 이용해서 매트릭스를 만듦 . color는 각각 RGB . msno.matrix( df=df_train.iloc[:,:],figsize=(8,8),color=(0.8,0.5,0.2)) . &lt;AxesSubplot:&gt; . 빈칸은 null . msno.bar( df=df_train.iloc[:,:],figsize=(8,8),color=(0.8,0.5,0.2)) . &lt;AxesSubplot:&gt; . f,ax=plt.subplots(1, 2, figsize=(18,8)) df_train[&#39;Survived&#39;].value_counts() .plot.pie(explode=[0,0.1],autopct=&#39;%0.1f%%&#39;,ax=ax[0],shadow=True) ax[0].set_title(&#39;Pie plot - Survived&#39;) ax[0].set_ylabel(&#39;&#39;) # 원래 pieplot y축에 라벨 있었는데 없애줌 sns.countplot(&#39;Survived&#39;, data=df_train, ax=ax[1]) # df_train의 Survived column을 소환 ax[1].set_title(&#39;Count plot - Survived&#39;) plt.show() . df_train.shape . (891, 12) .",
            "url": "https://rhkrehtjd.github.io/kaggle/2021/12/23/titanic.html",
            "relUrl": "/2021/12/23/titanic.html",
            "date": " • Dec 23, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://rhkrehtjd.github.io/kaggle/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rhkrehtjd.github.io/kaggle/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}